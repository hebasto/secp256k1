name: CI
on:
  pull_request:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

concurrency:
  group: ${{ github.event_name != 'pull_request' && github.run_id || github.ref }}
  cancel-in-progress: true

env:
  ### compiler options
  HOST:
  WRAPPER_CMD:
  # Specific warnings can be disabled with -Wno-error=foo.
  # -pedantic-errors is not equivalent to -Werror=pedantic and thus not implied by -Werror according to the GCC manual.
  WERROR_CFLAGS: '-Werror -pedantic-errors'
  MAKEFLAGS: '-j4'
  BUILD: 'check'
  ### secp256k1 config
  ECMULTWINDOW: 15
  ECMULTGENKB: 86
  ASM: 'no'
  WIDEMUL: 'auto'
  WITH_VALGRIND: 'yes'
  EXTRAFLAGS:
  ### secp256k1 modules
  EXPERIMENTAL: 'no'
  ECDH: 'no'
  RECOVERY: 'no'
  EXTRAKEYS: 'no'
  SCHNORRSIG: 'no'
  MUSIG: 'no'
  ELLSWIFT: 'no'
  ### test options
  SECP256K1_TEST_ITERS: 64
  BENCH: 'yes'
  SECP256K1_BENCH_ITERS: 2
  CTIMETESTS: 'yes'
  SYMBOL_CHECK: 'yes'
  # Compile and run the examples.
  EXAMPLES: 'yes'

jobs:
  win64-native:
    name: ${{ matrix.configuration.job_name }}
    # See: https://github.com/actions/runner-images#available-images.
    runs-on: windows-2022

    strategy:
      fail-fast: false
      matrix:
        configuration:
          - job_name: 'x64 (MSVC): Windows (VS 2022, shared)'
            cmake_options: '-A x64 -DBUILD_SHARED_LIBS=ON'
            symbol_check: 'true'
          - job_name: 'x64 (MSVC): Windows (VS 2022, static)'
            cmake_options: '-A x64 -DBUILD_SHARED_LIBS=OFF'
          - job_name: 'x64 (MSVC): Windows (VS 2022, int128_struct)'
            cmake_options: '-A x64 -DSECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY=int128_struct'
          - job_name: 'x64 (MSVC): Windows (VS 2022, int128_struct with __(u)mulh)'
            cmake_options: '-A x64 -DSECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY=int128_struct'
            cpp_flags: '/DSECP256K1_MSVC_MULH_TEST_OVERRIDE'
          - job_name: 'x86 (MSVC): Windows (VS 2022)'
            cmake_options: '-A Win32'
          - job_name: 'x64 (MSVC): Windows (clang-cl)'
            cmake_options: '-T ClangCL'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - shell: ctest --build-config Debug --verbose --script {0}
        run: |
          set(CTEST_SITE "github.com")
          set(CTEST_UPDATE_VERSION_ONLY TRUE)
          set(CTEST_BUILD_NAME "${{ matrix.configuration.job_name }}")
          set(CTEST_CHANGE_ID "$ENV{GITHUB_REF}")
          set(CTEST_SOURCE_DIRECTORY "$ENV{GITHUB_WORKSPACE}")
          set(CTEST_BINARY_DIRECTORY "$ENV{GITHUB_WORKSPACE}/build")
          # set(CTEST_SUBMIT_URL "https://cdash.org/")

          ctest_start("Experimental" GROUP "${{ github.event_name }}")
          set(CTEST_SUBMIT_URL "https://my.cdash.org/submit.php?project=libsecp256k1")
          ctest_update()
          ctest_configure(OPTIONS ${{ matrix.configuration.cmake_options }})
          ctest_build()
          ctest_test()
          ctest_submit(HTTPHEADER "Authorization: Bearer ${{ secrets.CDASH_ORG_AUTH_TOKEN }}")

      # - name: Generate buildsystem
      #   run: cmake -E env CFLAGS="/WX ${{ matrix.configuration.cpp_flags }}" cmake -B build -DSECP256K1_ENABLE_MODULE_RECOVERY=ON -DSECP256K1_BUILD_EXAMPLES=ON ${{ matrix.configuration.cmake_options }}

      # - name: Build
      #   run: cmake --build build --config RelWithDebInfo -- /p:UseMultiToolTask=true /maxCpuCount

      # - name: Binaries info
      #   # Use the bash shell included with Git for Windows.
      #   shell: bash
      #   run: |
      #     cd build/bin/RelWithDebInfo && file *tests.exe bench*.exe libsecp256k1-*.dll || true

      # - name: Symbol check
      #   if: ${{ matrix.configuration.symbol_check }}
      #   run: |
      #     py -3 --version
      #     py -3 -m pip install lief
      #     py -3 .\tools\symbol-check.py build\bin\RelWithDebInfo\libsecp256k1-5.dll

      # - name: Check
      #   run: |
      #     ctest -C RelWithDebInfo --test-dir build -j ([int]$env:NUMBER_OF_PROCESSORS + 1)
      #     build\bin\RelWithDebInfo\bench_ecmult.exe
      #     build\bin\RelWithDebInfo\bench_internal.exe
      #     build\bin\RelWithDebInfo\bench.exe
