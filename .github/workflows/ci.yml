name: CI
on:
  pull_request:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

concurrency:
  group: ${{ github.event_name != 'pull_request' && github.run_id || github.ref }}
  cancel-in-progress: true

jobs:
  win64-native:
    name: ${{ matrix.configuration.job_name }}
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        configuration:
          - job_name: 'x64 (MSVC): Windows (VS 2022, shared)'
            cmake_options: '-A x64 -DBUILD_SHARED_LIBS=ON'
            symbol_check: 'true'
          - job_name: 'x64 (MSVC): Windows (VS 2022, static)'
            cmake_options: '-A x64 -DBUILD_SHARED_LIBS=OFF'
          - job_name: 'x64 (MSVC): Windows (VS 2022, int128_struct)'
            cmake_options: '-A x64 -DSECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY=int128_struct'
          - job_name: 'x64 (MSVC): Windows (VS 2022, int128_struct with __(u)mulh)'
            cmake_options: '-A x64 -DSECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY=int128_struct'
            cpp_flags: '/DSECP256K1_MSVC_MULH_TEST_OVERRIDE'
          - job_name: 'x86 (MSVC): Windows (VS 2022)'
            cmake_options: '-A Win32'
          - job_name: 'x64 (clang-cl): Windows (VS 2022, shared)'
            cmake_options: '-T ClangCL -DBUILD_SHARED_LIBS=ON'
            symbol_check: 'true'
          - job_name: 'x64 (clang-cl): Windows (VS 2022, static)'
            cmake_options: '-T ClangCL -DBUILD_SHARED_LIBS=OFF'
          - job_name: 'x64 (clang-cl): Windows (VS 2022, int128_struct)'
            cmake_options: '-T ClangCL -DSECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY=int128_struct'
          - job_name: 'x64 (clang-cl): Windows (VS 2022, int128_struct with __(u)mulh)'
            cmake_options: '-T ClangCL -DSECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY=int128_struct'
            cpp_flags: '/DSECP256K1_MSVC_MULH_TEST_OVERRIDE'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate buildsystem
        run: cmake -E env CFLAGS="/WX ${{ matrix.configuration.cpp_flags }}" cmake -B build -DSECP256K1_ENABLE_MODULE_RECOVERY=ON ${{ matrix.configuration.cmake_options }}

      - name: Build
        run: cmake --build build --config RelWithDebInfo -- /p:UseMultiToolTask=true /maxCpuCount

      - name: Benchmark
        run: |
          build\bin\RelWithDebInfo\bench_ecmult.exe
          build\bin\RelWithDebInfo\bench_internal.exe
          build\bin\RelWithDebInfo\bench.exe

  windows-cross:
    name: 'Linux->Windows cross, no tests'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gcc-mingw-w64-x86-64

      - name: Generate buildsystem
        run: cmake -B build --toolchain cmake/x86_64-w64-mingw32.toolchain.cmake --preset dev-mode

      - name: Build
        run: cmake --build build --config RelWithDebInfo

      - name: Upload built executables
        uses: actions/upload-artifact@v4
        with:
          name: x86_64-w64-mingw32-executables-${{ github.run_id }}
          path: |
            build/bin/*

  windows-native-bench:
    name: 'Windows, benchmark cross-built'
    runs-on: windows-latest
    needs: windows-cross

    steps:
      - name: Download built executables
        uses: actions/download-artifact@v4
        with:
          name: x86_64-w64-mingw32-executables-${{ github.run_id }}

      - name: Benchmark
        run: |
          .\bench_ecmult.exe
          .\bench_internal.exe
          .\bench.exe
