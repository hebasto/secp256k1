name: CI
on:
  pull_request:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

concurrency:
  group: ${{ github.event_name != 'pull_request' && github.run_id || github.ref }}
  cancel-in-progress: true

env:
  ### compiler options
  HOST:
  WRAPPER_CMD:
  # Specific warnings can be disabled with -Wno-error=foo.
  # -pedantic-errors is not equivalent to -Werror=pedantic and thus not implied by -Werror according to the GCC manual.
  WERROR_CFLAGS: '-Werror -pedantic-errors'
  MAKEFLAGS: '-j4'
  BUILD: 'check'
  ### secp256k1 config
  ECMULTWINDOW: 15
  ECMULTGENKB: 86
  ASM: 'no'
  WIDEMUL: 'auto'
  WITH_VALGRIND: 'yes'
  EXTRAFLAGS:
  ### secp256k1 modules
  EXPERIMENTAL: 'no'
  ECDH: 'no'
  RECOVERY: 'no'
  EXTRAKEYS: 'no'
  SCHNORRSIG: 'no'
  MUSIG: 'no'
  ELLSWIFT: 'no'
  ### test options
  SECP256K1_TEST_ITERS: 64
  BENCH: 'yes'
  SECP256K1_BENCH_ITERS: 2
  CTIMETESTS: 'yes'
  SYMBOL_CHECK: 'yes'
  # Compile and run the examples.
  EXAMPLES: 'yes'

jobs:
  docker_cache:
    name: "Build ${{ matrix.arch }} Docker image"
    runs-on: ${{ matrix.runner }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # See: https://github.com/moby/buildkit/issues/3969.
          driver-opts: |
            network=host

      - name: Build container
        uses: docker/build-push-action@v5
        with:
          file: ./ci/linux-debian.Dockerfile
          tags: ${{ matrix.arch }}-debian-image
          cache-from: type=gha
          cache-to: type=gha,mode=min

  msan_debian:
    name: "MSan"
    runs-on: ubuntu-latest
    needs: docker_cache

    strategy:
      fail-fast: false
      matrix:
        configuration:
          - env_vars:
              CTIMETESTS: 'yes'
              CFLAGS: '-fsanitize=memory -fsanitize-recover=memory -g'
          - env_vars:
              ECMULTGENKB: 2
              ECMULTWINDOW: 2
              CTIMETESTS: 'yes'
              CFLAGS: '-fsanitize=memory -fsanitize-recover=memory -g -O3'
          - env_vars:
              # -fsanitize-memory-param-retval is clang's default, but our build system disables it
              # when ctime_tests when enabled.
              CFLAGS: '-fsanitize=memory -fsanitize-recover=memory -fsanitize-memory-param-retval -g'
              CTIMETESTS: 'no'

    env:
      ECDH: 'yes'
      RECOVERY: 'yes'
      EXTRAKEYS: 'yes'
      SCHNORRSIG: 'yes'
      MUSIG: 'yes'
      ELLSWIFT: 'yes'
      CC: 'clang'
      SECP256K1_TEST_ITERS: 32
      ASM: 'no'
      WITH_VALGRIND: 'no'
      SYMBOL_CHECK: 'no'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: CI script
        env: ${{ matrix.configuration.env_vars }}
        uses: ./.github/actions/run-in-docker-action
        with:
          dockerfile: ./ci/linux-debian.Dockerfile
          tag: x64-debian-image

      - name: Print logs
        uses: ./.github/actions/print-logs
        if: ${{ !cancelled() }}
